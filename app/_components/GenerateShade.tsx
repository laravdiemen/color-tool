"use client";

// External dependencies
import { useEffect, useState } from "react";

// Internal dependencies
import { useSettings } from "@/app/_contexts/SettingsContext";
import Tile from "@/app/_components/Tile";
import Wrapper from "@/app/_ui/Wrapper";
import Heading from "@/app/_ui/Heading";
import { getHexColorWithOpacity, getSingleColor } from "@/app/_lib/colors";
import { type Color } from "@/app/_lib/types";

type GenerateShadeProps = {
  background: 0 | 255;
};

export default function GenerateShade({
  background = 255,
}: GenerateShadeProps) {
  const backgroundColor = background === 255 ? "white" : "black";
  const backgroundShade = background === 255 ? "lighter" : "darker";

  const [shade, setShade] = useState(0.8);
  const [shadeColor, setShadeColor] = useState<Color | undefined>(undefined);

  const { baseColor, colorPalette } = useSettings();

  useEffect(() => {
    if (!baseColor) return;

    const lighterColor = getHexColorWithOpacity(baseColor, shade, background);
    const lighterColorObject = getSingleColor(baseColor, lighterColor);
    setShadeColor(lighterColorObject);
  }, [shade, baseColor, background]);

  if (!colorPalette[500]) return;

  return (
    <Wrapper className="md:!col-span-6">
      <Heading as="h2" className="mb-2">
        Generate {backgroundShade} shade
      </Heading>

      <p className="first-letter:uppercase">
        {backgroundShade} shades are generated by applying opacity to a{" "}
        {backgroundColor} background.
      </p>

      <div className="flex flex-wrap items-center gap-8">
        <div>
          <label htmlFor="shade" className="sr-only">
            {backgroundShade} shade opacity
          </label>
          <div className="mb-2 flex gap-x-4">
            <span aria-hidden="true">0</span>
            <input
              type="range"
              id="shade"
              name="shade"
              value={shade}
              onChange={(e) => setShade(Number(e.target.value))}
              min="0"
              max="1"
              step="0.01"
              className="accent-slate-600"
            />
            <span aria-hidden="true">1</span>
          </div>
          <p className="mb-0">Opacity: {shade}</p>
        </div>

        {shadeColor && (
          <Tile>
            <Tile.ColorSquare
              bgColor={shadeColor.color}
              textColor={shadeColor.contrast45}
              colorToCopy={shadeColor.color}
            />
            <Tile.ColorLabel color={shadeColor.color} />
          </Tile>
        )}
      </div>
    </Wrapper>
  );
}
